


ARM Macro Assembler    Page 1 


    1 00000000         ;   ****************************************************
                       ******************
    2 00000000         ;   *                SEGGER Microcontroller GmbH & Co. K
                       G                *
    3 00000000         ;   *                        The Embedded Experts       
                                        *
    4 00000000         ;   ****************************************************
                       ******************
    5 00000000         ;   *                                                   
                                        *
    6 00000000         ;   *       (c) 1995 - 2015  SEGGER Microcontroller GmbH
                        & Co. KG        *
    7 00000000         ;   *                                                   
                                        *
    8 00000000         ;   *       www.segger.com     Support: support@segger.c
                       om               *
    9 00000000         ;   *                                                   
                                        *
   10 00000000         ;   ****************************************************
                       ******************
   11 00000000         ;    
   12 00000000         ;   ----------------------------------------------------
                       ------------------
   13 00000000         ;   File    : JLINK_MONITOR_ISR_ARM.s
   14 00000000         ;   Purpose : Implementation of debug monitor for J-Link
                        monitor mode
   15 00000000         ;             debug on Cortex-M devices, supporting ARM 
                       compiler.
   16 00000000         ;   --------  END-OF-HEADER  ---------------------------
                       ------------------
   17 00000000         
   18 00000000                 EXTERN           JLINK_MONITOR_OnEnter
   19 00000000                 EXTERN           JLINK_MONITOR_OnExit
   20 00000000                 EXTERN           JLINK_MONITOR_OnPoll
   21 00000000         
   22 00000000                 EXPORT           DebugMon_Handler
   23 00000000         
   24 00000000         ;/******************************************************
                       ***************
   25 00000000         ;*
   26 00000000         ;*       Defines, configurable
   27 00000000         ;*
   28 00000000         ;*******************************************************
                       ***************
   29 00000000         ;*/
   30 00000000         
   31 00000000 00000064 
                       _MON_VERSION
                               EQU              100         ; V x.yy
   32 00000000         
   33 00000000         ;/******************************************************
                       ***************
   34 00000000         ;*
   35 00000000         ;*       Defines, fixed
   36 00000000         ;*
   37 00000000         ;*******************************************************
                       ***************
   38 00000000         ;*/
   39 00000000         



ARM Macro Assembler    Page 2 


   40 00000000 00000000 
                       _APP_SP_OFF_R0
                               EQU              0x00
   41 00000000 00000004 
                       _APP_SP_OFF_R1
                               EQU              0x04
   42 00000000 00000008 
                       _APP_SP_OFF_R2
                               EQU              0x08
   43 00000000 0000000C 
                       _APP_SP_OFF_R3
                               EQU              0x0C
   44 00000000 00000010 
                       _APP_SP_OFF_R12
                               EQU              0x10
   45 00000000 00000014 
                       _APP_SP_OFF_R14_LR
                               EQU              0x14
   46 00000000 00000018 
                       _APP_SP_OFF_PC
                               EQU              0x18
   47 00000000 0000001C 
                       _APP_SP_OFF_XPSR
                               EQU              0x1C
   48 00000000 00000020 
                       _APP_SP_OFF_S0
                               EQU              0x20
   49 00000000 00000024 
                       _APP_SP_OFF_S1
                               EQU              0x24
   50 00000000 00000028 
                       _APP_SP_OFF_S2
                               EQU              0x28
   51 00000000 0000002C 
                       _APP_SP_OFF_S3
                               EQU              0x2C
   52 00000000 00000030 
                       _APP_SP_OFF_S4
                               EQU              0x30
   53 00000000 00000034 
                       _APP_SP_OFF_S5
                               EQU              0x34
   54 00000000 00000038 
                       _APP_SP_OFF_S6
                               EQU              0x38
   55 00000000 0000003C 
                       _APP_SP_OFF_S7
                               EQU              0x3C
   56 00000000 00000040 
                       _APP_SP_OFF_S8
                               EQU              0x40
   57 00000000 00000044 
                       _APP_SP_OFF_S9
                               EQU              0x44
   58 00000000 00000048 
                       _APP_SP_OFF_S10
                               EQU              0x48
   59 00000000 0000004C 
                       _APP_SP_OFF_S11



ARM Macro Assembler    Page 3 


                               EQU              0x4C
   60 00000000 00000050 
                       _APP_SP_OFF_S12
                               EQU              0x50
   61 00000000 00000054 
                       _APP_SP_OFF_S13
                               EQU              0x54
   62 00000000 00000058 
                       _APP_SP_OFF_S14
                               EQU              0x58
   63 00000000 0000005C 
                       _APP_SP_OFF_S15
                               EQU              0x5C
   64 00000000 00000060 
                       _APP_SP_OFF_FPSCR
                               EQU              0x60
   65 00000000         
   66 00000000 00000020 
                       _NUM_BYTES_BASIC_STACKFRAME
                               EQU              32
   67 00000000 00000048 
                       _NUM_BYTES_EXTENDED_STACKFRAME
                               EQU              72
   68 00000000         
   69 00000000 00000000 
                       _SYSTEM_DCRDR_OFF
                               EQU              0x00
   70 00000000 00000004 
                       _SYSTEM_DEMCR_OFF
                               EQU              0x04
   71 00000000         
   72 00000000 E000EDF0 
                       _SYSTEM_DHCSR
                               EQU              0xE000EDF0  ; Debug Halting Con
                                                            trol and Status Reg
                                                            ister (DHCSR)
   73 00000000 E000EDF4 
                       _SYSTEM_DCRSR
                               EQU              0xE000EDF4  ; Debug Core Regist
                                                            er Selector Registe
                                                            r (DCRSR)
   74 00000000 E000EDF8 
                       _SYSTEM_DCRDR
                               EQU              0xE000EDF8  ; Debug Core Regist
                                                            er Data Register (D
                                                            CRDR)
   75 00000000 E000EDFC 
                       _SYSTEM_DEMCR
                               EQU              0xE000EDFC  ; Debug Exception a
                                                            nd Monitor Control 
                                                            Register (DEMCR)
   76 00000000         
   77 00000000 E000EF34 
                       _SYSTEM_FPCCR
                               EQU              0xE000EF34  ; Floating-Point Co
                                                            ntext Control Regis
                                                            ter (FPCCR)
   78 00000000 E000EF38 
                       _SYSTEM_FPCAR



ARM Macro Assembler    Page 4 


                               EQU              0xE000EF38  ; Floating-Point Co
                                                            ntext Address Regis
                                                            ter (FPCAR)
   79 00000000 E000EF3C 
                       _SYSTEM_FPDSCR
                               EQU              0xE000EF3C  ; Floating-Point De
                                                            fault Status Contro
                                                            l Register (FPDSCR)
                                                            
   80 00000000 E000EF40 
                       _SYSTEM_MVFR0
                               EQU              0xE000EF40  ; Media and FP Feat
                                                            ure Register 0 (MVF
                                                            R0)
   81 00000000 E000EF44 
                       _SYSTEM_MVFR1
                               EQU              0xE000EF44  ; Media and FP Feat
                                                            ure Register 1 (MVF
                                                            R1)
   82 00000000         
   83 00000000         ;/******************************************************
                       *************** 
   84 00000000         ;* 
   85 00000000         ;*       Signature of monitor
   86 00000000         ;* 
   87 00000000         ;*  Function description 
   88 00000000         ;*    Needed for targets where also a boot ROM is presen
                       t that possibly specifies a vector table with a valid de
                       bug monitor exception entry
   89 00000000         ;*/ 
   90 00000000                 AREA             |.text|, CODE, READONLY
   91 00000000         ;
   92 00000000         ;JLINKMONHANDLER
   93 00000000         ;
   94 00000000 4A              DCB              0x4A
   95 00000001 4C              DCB              0x4C
   96 00000002 49              DCB              0x49
   97 00000003 4E              DCB              0x4E
   98 00000004 4B              DCB              0x4B
   99 00000005 4D              DCB              0x4D
  100 00000006 4F              DCB              0x4F
  101 00000007 4E              DCB              0x4E
  102 00000008 48              DCB              0x48
  103 00000009 41              DCB              0x41
  104 0000000A 4E              DCB              0x4E
  105 0000000B 44              DCB              0x44
  106 0000000C 4C              DCB              0x4C
  107 0000000D 45              DCB              0x45
  108 0000000E 52              DCB              0x52
  109 0000000F 00              DCB              0x00        ;// Align to 8-byte
                                                            s
  110 00000010         
  111 00000010         ;/******************************************************
                       *************** 
  112 00000010         ;* 
  113 00000010         ;*       DebugMon_Handler()
  114 00000010         ;* 
  115 00000010         ;*  Function description 
  116 00000010         ;*    Debug monitor handler. CPU enters this handler in 



ARM Macro Assembler    Page 5 


                       case a "halt" request is made from the debugger.
  117 00000010         ;*    This handler is also responsible for handling comm
                       ands that are sent by the debugger.
  118 00000010         ;*
  119 00000010         ;*  Notes 
  120 00000010         ;*    This is actually the ISR for the debug inerrupt (e
                       xception no. 12)
  121 00000010         ;*/ 
  122 00000010                 THUMB
  123 00000010                 PRESERVE8
  124 00000010         DebugMon_Handler
  125 00000010         ;
  126 00000010         ; General procedure:
  127 00000010         ; DCRDR is used as communication register
  128 00000010         ; DEMCR[19] is used as ready flag
  129 00000010         ; For the command J-Link sends to the monitor: DCRDR[7:0
                       ] == Cmd, DCRDR[31:8] == ParamData
  130 00000010         ;
  131 00000010         ; 1) Monitor sets DEMCR[19] whenever it is ready to rece
                       ive new commands/data
  132 00000010         ;    DEMCR[19] is initially set on debug monitor entry
  133 00000010         ; 2) J-Link will clear once it has placed conmmand/data 
                       in DCRDR for J-Link
  134 00000010         ; 3) Monitor will wait for DEMCR[19] to be cleared
  135 00000010         ; 4) Monitor will process command (May cause additional 
                       data transfers etc., depends on command
  136 00000010         ; 5) No restart-CPU command? => Back to 2), Otherwise =>
                        6)
  137 00000010         ; 6) Monitor will clear DEMCR[19] 19 to indicate that it
                        is no longer ready
  138 00000010         ;
  139 00000010 B500            PUSH             {LR}
  140 00000012 F7FF FFFE       BL               JLINK_MONITOR_OnEnter
  141 00000016 F85D EB04       POP              {LR}
  142 0000001A 4B13            LDR.N            R3,_AddrDCRDR ; 0xe000edf8 == _
                                                            SYSTEM_DCRDR
  143 0000001C E002            B.N              _IndicateMonReady
  144 0000001E         _WaitProbeReadIndicateMonRdy         ; while(_SYSTEM_DEM
                                                            CR & (1uL << 19)); 
                                                             => Wait until J-Li
                                                            nk has read item
  145 0000001E 6858            LDR              R0,[R3, #+_SYSTEM_DEMCR_OFF] 
                                                            ; _SYSTEM_DEMCR
  146 00000020 0300            LSLS             R0,R0,#+12
  147 00000022 D4FC            BMI.N            _WaitProbeReadIndicateMonRdy
  148 00000024         _IndicateMonReady
  149 00000024 6858            LDR              R0,[R3, #+_SYSTEM_DEMCR_OFF] ; 
                                                            _SYSTEM_DEMCR |= (1
                                                            uL << 19);  => Set 
                                                            MON_REQ bit, so J-L
                                                            ink knows monitor i
                                                            s ready to receive 
                                                            commands
  150 00000026 F440 2000       ORR              R0,R0,#0x80000
  151 0000002A 6058            STR              R0,[R3, #+_SYSTEM_DEMCR_OFF]
  152 0000002C         ;
  153 0000002C         ; During command loop:
  154 0000002C         ; R0  = Tmp
  155 0000002C         ; R1  = Tmp



ARM Macro Assembler    Page 6 


  156 0000002C         ; R2  = Tmp
  157 0000002C         ; R3  = &_SYSTEM_DCRDR  (allows also access to DEMCR wit
                       h offset)
  158 0000002C         ; R12 = Tmp
  159 0000002C         ;
  160 0000002C         ; Outside command loop R0-R3 and R12 may be overwritten 
                       by MONITOR_OnPoll()
  161 0000002C         ;
  162 0000002C         _WaitForJLinkCmd                     ; do {
  163 0000002C B500            PUSH             {LR}
  164 0000002E F7FF FFFE       BL               JLINK_MONITOR_OnPoll
  165 00000032 F85D EB04       POP              {LR}
  166 00000036 4B0C            LDR.N            R3,_AddrDCRDR ; 0xe000edf8 == _
                                                            SYSTEM_DCRDR
  167 00000038 6858            LDR              R0,[R3, #+_SYSTEM_DEMCR_OFF]
  168 0000003A 0D00            LSRS             R0,R0,#+20  ; DEMCR[19] -> Carr
                                                            y Clear? => J-Link 
                                                            has placed command 
                                                            for us
  169 0000003C D2F6            BCS              _WaitForJLinkCmd
  170 0000003E         ;
  171 0000003E         ; Perform command
  172 0000003E         ; Command is placed by J-Link in DCRDR[7:0] and addition
                       al parameter data is stored in DCRDR[31:8]
  173 0000003E         ; J-Link clears DEMCR[19] to indicate that it placed a c
                       ommand/data or read data
  174 0000003E         ; Monitor sets DEMCR[19] to indicate that it placed data
                        or read data / is ready for a new command
  175 0000003E         ; Setting DEMCR[19] indicates "monitor ready for new com
                       mand / data" and also indicates: "data has been placed i
                       n DCRDR by monitor, for J-Link"
  176 0000003E         ; Therefore it is responsibility of the commands to resp
                       ond to the commands accordingly
  177 0000003E         ;
  178 0000003E         ; Commands for debug monitor
  179 0000003E         ; Commands must not exceed 0xFF (255) as we only defined
                        8-bits for command-part. Higher 24-bits are parameter i
                       nfo for current command
  180 0000003E         ;
  181 0000003E         ; Protocol for different commands:
  182 0000003E         ;   J-Link: Cmd -> DCRDR,  DEMCR[19] -> 0 => Cmd placed 
                       by probe
  183 0000003E         ;
  184 0000003E 6818            LDR              R0,[R3, #+_SYSTEM_DCRDR_OFF] ; 
                                                            ParamInfo = _SYSTEM
                                                            _DCRDR
  185 00000040 0A01            LSRS             R1,R0,#+8   ; ParamInfo >>= 8
  186 00000042 0600            LSLS             R0,R0,#+24
  187 00000044 0E00            LSRS             R0,R0,#+24  ; Cmd = ParamInfo &
                                                             0xFF
  188 00000046         ;
  189 00000046         ; switch (Cmd)
  190 00000046         ;
  191 00000046 2800            CMP              R0,#+0
  192 00000048 D012            BEQ.N            _HandleGetMonVersion ; case _MO
                                                            N_CMD_GET_MONITOR_V
                                                            ERSION
  193 0000004A 2802            CMP              R0,#+2
  194 0000004C D018            BEQ.N            _HandleReadReg ; case _MON_CMD_



ARM Macro Assembler    Page 7 


                                                            READ_REG
  195 0000004E D302            BCC.N            _HandleRestartCPU ; case _MON_C
                                                            MD_RESTART_CPU
  196 00000050 2803            CMP              R0,#+3
  197 00000052 D014            BEQ.N            _HandleWriteReg_Veneer ; case _
                                                            MON_CMD_WRITE_REG
  198 00000054 E7E6            B.N              _IndicateMonReady ; default : w
                                                            hile (1);
  199 00000056         ;
  200 00000056         ; Return
  201 00000056         ; _MON_CMD_RESTART_CPU
  202 00000056         ;   CPU:                   DEMCR[19] -> 0 => Monitor no 
                       longer ready
  203 00000056         ;
  204 00000056         _HandleRestartCPU
  205 00000056 6858            LDR              R0,[R3, #+_SYSTEM_DEMCR_OFF] ; 
                                                            _SYSTEM_DEMCR &= ~(
                                                            1uL << 19);  => Cle
                                                            ar MON_REQ to indic
                                                            ate that monitor is
                                                             no longer active
  206 00000058 F420 2000       BIC              R0,R0,#0x80000
  207 0000005C 6058            STR              R0,[R3, #+_SYSTEM_DEMCR_OFF]
  208 0000005E B500            PUSH             {LR}
  209 00000060 F7FF FFFE       BL               JLINK_MONITOR_OnExit
  210 00000064 BD00            POP              {PC}
  211 00000066         ;
  212 00000066         ; Place data section here to not get in trouble with loa
                       d-offsets
  213 00000066         ;
  214 00000066 00 00           ALIGN            4
  215 00000068         _AddrDCRDR
  216 00000068 E000EDF8        DCD              0xE000EDF8
  217 0000006C         _AddrCPACR
  218 0000006C E000ED88        DCD              0xE000ED88
  219 00000070         
  220 00000070                 AREA             |.text|, CODE, READONLY
  221 00000070                 THUMB
  222 00000070         
  223 00000070         ;/******************************************************
                       *************** 
  224 00000070         ;* 
  225 00000070         ;*       _HandleGetMonVersion
  226 00000070         ;*
  227 00000070         ;*/
  228 00000070         _HandleGetMonVersion
  229 00000070         ;
  230 00000070         ; _MON_CMD_GET_MONITOR_VERSION
  231 00000070         ;   CPU:    Data -> DCRDR, DEMCR[19] -> 1 => Data ready
  232 00000070         ;   J-Link: DCRDR -> Read, DEMCR[19] -> 0 => Data read
  233 00000070         ;   CPU:                   DEMCR[19] -> 1 => Mon ready
  234 00000070         ;
  235 00000070 2064            MOVS             R0,#+_MON_VERSION
  236 00000072 6018            STR              R0,[R3, #+_SYSTEM_DCRDR_OFF] 
                                                            ; _SYSTEM_DCRDR = x
                                                            
  237 00000074 6858            LDR              R0,[R3, #+_SYSTEM_DEMCR_OFF] ; 
                                                            _SYSTEM_DEMCR |= (1
                                                            uL << 19);  => Set 



ARM Macro Assembler    Page 8 


                                                            MON_REQ bit, so J-L
                                                            ink knows monitor i
                                                            s ready to receive 
                                                            commands
  238 00000076 F440 2000       ORR              R0,R0,#0x80000
  239 0000007A 6058            STR              R0,[R3, #+_SYSTEM_DEMCR_OFF] ; 
                                                            Indicate data ready
                                                            
  240 0000007C E7CF            B                _WaitProbeReadIndicateMonRdy
  241 0000007E         
  242 0000007E         ;/******************************************************
                       *************** 
  243 0000007E         ;* 
  244 0000007E         ;*       _HandleReadReg
  245 0000007E         ;*
  246 0000007E         ;*/
  247 0000007E         _HandleWriteReg_Veneer
  248 0000007E E07D            B.N              _HandleWriteReg
  249 00000080         _HandleReadReg
  250 00000080         ;
  251 00000080         ; _MON_CMD_READ_REG
  252 00000080         ;   CPU:    Data -> DCRDR, DEMCR[19] -> 1 => Data ready
  253 00000080         ;   J-Link: DCRDR -> Read, DEMCR[19] -> 0 => Data read
  254 00000080         ;   CPU:                   DEMCR[19] -> 1 => Mon ready
  255 00000080         ;
  256 00000080         ;
  257 00000080         ; Register indexes
  258 00000080         ; 0-15: R0-R15       (13 == R13 reserved => is banked ..
                       . Has to be read as PSP / MSP. Decision has to be done b
                       y J-Link DLL side!)
  259 00000080         ; 16: XPSR
  260 00000080         ; 17: MSP
  261 00000080         ; 18: PSP
  262 00000080         ; 19: CFBP           CONTROL/FAULTMASK/BASEPRI/PRIMASK (
                       packed into 4 bytes of word. CONTROL = CFBP[31:24], FAUL
                       TMASK = CFBP[16:23], BASEPRI = CFBP[15:8], PRIMASK = CFB
                       P[7:0]
  263 00000080         ; 20: FPSCR
  264 00000080         ; 21-52: FPS0-FPS31
  265 00000080         ;
  266 00000080         ;
  267 00000080         ; Register usage when entering this "subroutine":
  268 00000080         ; R0 Cmd
  269 00000080         ; R1 ParamInfo
  270 00000080         ; R2 ---
  271 00000080         ; R3  = &_SYSTEM_DCRDR  (allows also access to DEMCR wit
                       h offset)
  272 00000080         ; R12 ---
  273 00000080         ;
  274 00000080         ; Table B1-9 EXC_RETURN definition of exception return b
                       ehavior, with FP extension
  275 00000080         ; LR           Return to     Return SP   Frame type
  276 00000080         ; ------------------------------------------------------
                       ---
  277 00000080         ; 0xFFFFFFE1   Handler mode. MSP         Extended
  278 00000080         ; 0xFFFFFFE9   Thread mode   MSP         Extended
  279 00000080         ; 0xFFFFFFED   Thread mode   PSP         Extended
  280 00000080         ; 0xFFFFFFF1   Handler mode. MSP         Basic
  281 00000080         ; 0xFFFFFFF9   Thread mode   MSP         Basic



ARM Macro Assembler    Page 9 


  282 00000080         ; 0xFFFFFFFD   Thread mode   PSP         Basic
  283 00000080         ;
  284 00000080         ; So LR[2] == 1 => Return stack == PSP else MSP
  285 00000080         ;
  286 00000080         ;  R0-R3, R12, PC, xPSR can be read from application sta
                       ckpointer
  287 00000080         ;  Other regs can be read directly
  288 00000080         ;
  289 00000080 EA5F 02DE       LSRS             R2,LR,#+3   ; Shift LR[2] into 
                                                            carry => Carry clea
                                                            r means that CPU wa
                                                            s running on MSP
  290 00000084 BF2C            ITE              CS
  291 00000086 F3EF 8209       MRSCS            R2,PSP
  292 0000008A F3EF 8208       MRSCC            R2,MSP
  293 0000008E 2904            CMP              R1,#+4      ; if (RegIndex < 4)
                                                             { (R0-R3)
  294 00000090 D202            BCS              _HandleReadRegR4
  295 00000092 F852 0021       LDR              R0,[R2, R1, LSL #+2] ; v = [SP 
                                                            + Rx * 4] (R0-R3)
  296 00000096 E06B            B.N              _HandleReadRegDone
  297 00000098         _HandleReadRegR4
  298 00000098 2905            CMP              R1,#+5      ; if (RegIndex < 5)
                                                             { (R4)
  299 0000009A D201            BCS              _HandleReadRegR5
  300 0000009C 4620            MOV              R0,R4
  301 0000009E E067            B.N              _HandleReadRegDone
  302 000000A0         _HandleReadRegR5
  303 000000A0 2906            CMP              R1,#+6      ; if (RegIndex < 6)
                                                             { (R5)
  304 000000A2 D201            BCS              _HandleReadRegR6
  305 000000A4 4628            MOV              R0,R5
  306 000000A6 E063            B.N              _HandleReadRegDone
  307 000000A8         _HandleReadRegR6
  308 000000A8 2907            CMP              R1,#+7      ; if (RegIndex < 7)
                                                             { (R6)
  309 000000AA D201            BCS              _HandleReadRegR7
  310 000000AC 4630            MOV              R0,R6
  311 000000AE E05F            B.N              _HandleReadRegDone
  312 000000B0         _HandleReadRegR7
  313 000000B0 2908            CMP              R1,#+8      ; if (RegIndex < 8)
                                                             { (R7)
  314 000000B2 D201            BCS              _HandleReadRegR8
  315 000000B4 4638            MOV              R0,R7
  316 000000B6 E05B            B.N              _HandleReadRegDone
  317 000000B8         _HandleReadRegR8
  318 000000B8 2909            CMP              R1,#+9      ; if (RegIndex < 9)
                                                             { (R8)
  319 000000BA D201            BCS              _HandleReadRegR9
  320 000000BC 4640            MOV              R0,R8
  321 000000BE E057            B.N              _HandleReadRegDone
  322 000000C0         _HandleReadRegR9
  323 000000C0 290A            CMP              R1,#+10     ; if (RegIndex < 10
                                                            ) { (R9)
  324 000000C2 D201            BCS              _HandleReadRegR10
  325 000000C4 4648            MOV              R0,R9
  326 000000C6 E053            B.N              _HandleReadRegDone
  327 000000C8         _HandleReadRegR10
  328 000000C8 290B            CMP              R1,#+11     ; if (RegIndex < 11



ARM Macro Assembler    Page 10 


                                                            ) { (R10)
  329 000000CA D201            BCS              _HandleReadRegR11
  330 000000CC 4650            MOV              R0,R10
  331 000000CE E04F            B.N              _HandleReadRegDone
  332 000000D0         _HandleReadRegR11
  333 000000D0 290C            CMP              R1,#+12     ; if (RegIndex < 12
                                                            ) { (R11)
  334 000000D2 D201            BCS              _HandleReadRegR12
  335 000000D4 4658            MOV              R0,R11
  336 000000D6 E04B            B.N              _HandleReadRegDone
  337 000000D8         _HandleReadRegR12
  338 000000D8 290E            CMP              R1,#+14     ; if (RegIndex < 14
                                                            ) { (R12)
  339 000000DA D201            BCS              _HandleReadRegR14
  340 000000DC 6910            LDR              R0,[R2, #+_APP_SP_OFF_R12]
  341 000000DE E047            B.N              _HandleReadRegDone
  342 000000E0         _HandleReadRegR14
  343 000000E0 290F            CMP              R1,#+15     ; if (RegIndex < 15
                                                            ) { (R14 / LR)
  344 000000E2 D201            BCS              _HandleReadRegR15
  345 000000E4 6950            LDR              R0,[R2, #+_APP_SP_OFF_R14_LR]
  346 000000E6 E043            B.N              _HandleReadRegDone
  347 000000E8         _HandleReadRegR15
  348 000000E8 2910            CMP              R1,#+16     ; if (RegIndex < 16
                                                            ) { (R15 / PC)
  349 000000EA D201            BCS              _HandleReadRegXPSR
  350 000000EC 6990            LDR              R0,[R2, #+_APP_SP_OFF_PC]
  351 000000EE E03F            B.N              _HandleReadRegDone
  352 000000F0         _HandleReadRegXPSR
  353 000000F0 2911            CMP              R1,#+17     ; if (RegIndex < 17
                                                            ) { (xPSR)
  354 000000F2 D201            BCS              _HandleReadRegMSP
  355 000000F4 69D0            LDR              R0,[R2, #+_APP_SP_OFF_XPSR]
  356 000000F6 E03B            B.N              _HandleReadRegDone
  357 000000F8         _HandleReadRegMSP
  358 000000F8         ;
  359 000000F8         ; Stackpointer is tricky because we need to get some inf
                       o about the SP used in the user app, first
  360 000000F8         ;
  361 000000F8         ; Handle reading R0-R3 which can be read right from appl
                       ication stackpointer
  362 000000F8         ;
  363 000000F8         ; Table B1-9 EXC_RETURN definition of exception return b
                       ehavior, with FP extension
  364 000000F8         ; LR           Return to     Return SP   Frame type
  365 000000F8         ; ------------------------------------------------------
                       ---
  366 000000F8         ; 0xFFFFFFE1   Handler mode. MSP         Extended
  367 000000F8         ; 0xFFFFFFE9   Thread mode   MSP         Extended
  368 000000F8         ; 0xFFFFFFED   Thread mode   PSP         Extended
  369 000000F8         ; 0xFFFFFFF1   Handler mode. MSP         Basic
  370 000000F8         ; 0xFFFFFFF9   Thread mode   MSP         Basic
  371 000000F8         ; 0xFFFFFFFD   Thread mode   PSP         Basic
  372 000000F8         ;
  373 000000F8         ; So LR[2] == 1 => Return stack == PSP else MSP
  374 000000F8         ; Per architecture definition: Inside monitor (exception
                       ) SP = MSP
  375 000000F8         ;
  376 000000F8         ; Stack pointer handling is complicated because it is di



ARM Macro Assembler    Page 11 


                       fferent what is pushed on the stack before entering the 
                       monitor ISR...
  377 000000F8         ; Cortex-M: 8 regs
  378 000000F8         ; Cortex-M + forced-stack-alignment: 8 regs + 1 dummy-wo
                       rd if stack was not 8-byte aligned
  379 000000F8         ; Cortex-M + FPU: 8 regs + 17 FPU regs + 1 dummy-word + 
                       1-dummy word if stack was not 8-byte aligned
  380 000000F8         ; Cortex-M + FPU + lazy mode: 8 regs + 17 dummy-words + 
                       1 dummy-word + 1-dummy word if stack was not 8-byte alig
                       ned
  381 000000F8         ;
  382 000000F8 2912            CMP              R1,#+18     ; if (RegIndex < 18
                                                            ) { (MSP)
  383 000000FA D20E            BCS              _HandleReadRegPSP
  384 000000FC F3EF 8008       MRS              R0,MSP
  385 00000100 EA5F 01DE       LSRS             R1,LR,#+3   ; LR[2] -> Carry ==
                                                             0 => CPU was runni
                                                            ng on MSP => Needs 
                                                            correction
  386 00000104 D231            BCS              _HandleReadRegDone_Veneer ; CPU
                                                             was running on PSP
                                                            ? => No correction 
                                                            necessary
  387 00000106         _HandleSPCorrection
  388 00000106 EA5F 115E       LSRS             R1,LR,#+5   ; LR[4] -> Carry ==
                                                             0 => extended stac
                                                            k frame has been al
                                                            located. See ARM DD
                                                            I0403D, B1.5.7 Stac
                                                            k alignment on exce
                                                            ption entry
  389 0000010A BF2C            ITE              CS
  390 0000010C 3020            ADDCS            R0,R0,#+_NUM_BYTES_BASIC_STACKF
RAME
  391 0000010E 3048            ADDCC            R0,R0,#+_NUM_BYTES_EXTENDED_STA
CKFRAME
  392 00000110 69D1            LDR              R1,[R2, #+_APP_SP_OFF_XPSR] ; G
                                                            et xPSR from applic
                                                            ation stack (R2 has
                                                             been set to app st
                                                            ack on beginning of
                                                             _HandleReadReg)
  393 00000112 0949            LSRS             R1,R1,#+5   ; xPSR[9] -> Carry 
                                                            == 1 => Stack has b
                                                            een force-aligned b
                                                            efore pushing regs.
                                                             See ARM DDI0403D, 
                                                            B1.5.7 Stack alignm
                                                            ent on exception en
                                                            try
  394 00000114 BF28            IT               CS
  395 00000116 1D00            ADDCS            R0,R0,#+4
  396 00000118 E02A            B                _HandleReadRegDone
  397 0000011A         _HandleReadRegPSP                    ; RegIndex == 18
  398 0000011A 2913            CMP              R1,#+19     ; if (RegIndex < 19
                                                            ) {
  399 0000011C D205            BCS              _HandleReadRegCFBP
  400 0000011E F3EF 8009       MRS              R0,PSP      ; PSP is not touche
                                                            d by monitor



ARM Macro Assembler    Page 12 


  401 00000122 EA5F 01DE       LSRS             R1,LR,#+3   ; LR[2] -> Carry ==
                                                             1 => CPU was runni
                                                            ng on PSP => Needs 
                                                            correction
  402 00000126 D320            BCC              _HandleReadRegDone_Veneer ; CPU
                                                             was running on MSP
                                                            ? => No correction 
                                                            of PSP necessary
  403 00000128 E7ED            B                _HandleSPCorrection
  404 0000012A         _HandleReadRegCFBP
  405 0000012A         ;
  406 0000012A         ; CFBP is a register that can only be read via debug pro
                       be and is a merger of the following regs:
  407 0000012A         ; CONTROL/FAULTMASK/BASEPRI/PRIMASK (packed into 4 bytes
                        of word. CONTROL = CFBP[31:24], FAULTMASK = CFBP[16:23]
                       , BASEPRI = CFBP[15:8], PRIMASK = CFBP[7:0]
  408 0000012A         ; To keep J-Link side the same for monitor and halt mode
                       , we also return CFBP in monitor mode
  409 0000012A         ;
  410 0000012A 2914            CMP              R1,#+20     ; if (RegIndex < 20
                                                            ) { (CFBP)
  411 0000012C D21C            BCS              _HandleReadRegFPU
  412 0000012E 2000            MOVS             R0,#+0
  413 00000130 F3EF 8210       MRS              R2,PRIMASK
  414 00000134 4310            ORRS             R0,R2       ; Merge PRIMASK int
                                                            o CFBP[7:0]
  415 00000136 F3EF 8211       MRS              R2,BASEPRI
  416 0000013A 0212            LSLS             R2,R2,#+8   ; Merge BASEPRI int
                                                            o CFBP[15:8]
  417 0000013C 4310            ORRS             R0,R2
  418 0000013E F3EF 8213       MRS              R2,FAULTMASK
  419 00000142 0412            LSLS             R2,R2,#+16  ; Merge FAULTMASK i
                                                            nto CFBP[23:16]
  420 00000144 4310            ORRS             R0,R2
  421 00000146 F3EF 8214       MRS              R2,CONTROL
  422 0000014A EA5F 01DE       LSRS             R1,LR,#3    ; LR[2] -> Carry. C
                                                            ONTROL.SPSEL is sav
                                                            ed to LR[2] on exce
                                                            ption entry => ARM 
                                                            DDI0403D, B1.5.6 Ex
                                                            ception entry behav
                                                            ior
  423 0000014E BF28            IT               CS          ; As J-Link sees va
                                                            lue of CONTROL at a
                                                            pplication time, we
                                                             need reconstruct o
                                                            riginal value of CO
                                                            NTROL
  424 00000150 F042 0202       ORRCS            R2,R2,#+2   ; CONTROL.SPSEL (CO
                                                            NTROL[1]) == 0 insi
                                                            de monitor
  425 00000154 EA5F 115E       LSRS             R1,LR,#+5   ; LR[4] == NOT(CONT
                                                            ROL.FPCA)  -> Carry
                                                            
  426 00000158 BF2C            ITE              CS          ; Merge original va
                                                            lue of FPCA (CONTRO
                                                            L[2]) into read dat
                                                            a
  427 0000015A F022 0204       BICCS            R2,R2,#+0x04 ; Remember LR cont



ARM Macro Assembler    Page 13 


                                                            ains NOT(CONTROL)
  428 0000015E F042 0204       ORRCC            R2,R2,#+0x04
  429 00000162 0612            LSLS             R2,R2,#+24
  430 00000164 4310            ORRS             R0,R2
  431 00000166 E003            B.N              _HandleReadRegDone
  432 00000168         _HandleReadRegFPU
  433 00000168                 IF               :DEF:__FPU_PRESENT
  553 00000168 E000            B                _HandleReadRegUnknown
  554 0000016A         _HandleReadRegDone_Veneer
  555 0000016A E001            B                _HandleReadRegDone
  556 0000016C                 ENDIF
  557 0000016C         _HandleReadRegUnknown
  558 0000016C 2000            MOVS             R0,#+0      ; v = 0
  559 0000016E E7FF            B.N              _HandleReadRegDone
  560 00000170         _HandleReadRegDone
  561 00000170         ;
  562 00000170         ; Send register content to J-Link and wait until J-Link 
                       has read the data
  563 00000170         ;
  564 00000170 6018            STR              R0,[R3, #+_SYSTEM_DCRDR_OFF] 
                                                            ; DCRDR = v;
  565 00000172 6858            LDR              R0,[R3, #+_SYSTEM_DEMCR_OFF] ; 
                                                            _SYSTEM_DEMCR |= (1
                                                            uL << 19);  => Set 
                                                            MON_REQ bit, so J-L
                                                            ink knows monitor i
                                                            s ready to receive 
                                                            commands
  566 00000174 F440 2000       ORR              R0,R0,#0x80000
  567 00000178 6058            STR              R0,[R3, #+_SYSTEM_DEMCR_OFF] ; 
                                                            Indicate data ready
                                                            
  568 0000017A E750            B                _WaitProbeReadIndicateMonRdy
  569 0000017C         ;
  570 0000017C         ; Data section for register addresses
  571 0000017C         ;
  572 0000017C         _HandleWriteReg
  573 0000017C         ;
  574 0000017C         ; _MON_CMD_WRITE_REG
  575 0000017C         ;   CPU:                   DEMCR[19] -> 1 => Mon ready
  576 0000017C         ;   J-Link: Data -> DCRDR, DEMCR[19] -> 0 => Data placed
                        by probe
  577 0000017C         ;   CPU:    DCRDR -> Read, Process command, DEMCR[19] ->
                        1 => Data read & mon ready
  578 0000017C         ;
  579 0000017C         ; Register indexes
  580 0000017C         ; 0-15: R0-R15       (13 == R13 reserved => is banked ..
                       . Has to be read as PSP / MSP. Decision has to be done b
                       y J-Link DLL side!)
  581 0000017C         ; 16: XPSR
  582 0000017C         ; 17: MSP
  583 0000017C         ; 18: PSP
  584 0000017C         ; 19: CFBP           CONTROL/FAULTMASK/BASEPRI/PRIMASK (
                       packed into 4 bytes of word. CONTROL = CFBP[31:24], FAUL
                       TMASK = CFBP[16:23], BASEPRI = CFBP[15:8], PRIMASK = CFB
                       P[7:0]
  585 0000017C         ; 20: FPSCR
  586 0000017C         ; 21-52: FPS0-FPS31
  587 0000017C         ;



ARM Macro Assembler    Page 14 


  588 0000017C         ;
  589 0000017C         ; Register usage when entering this "subroutine":
  590 0000017C         ; R0 Cmd
  591 0000017C         ; R1 ParamInfo
  592 0000017C         ; R2 ---
  593 0000017C         ; R3  = &_SYSTEM_DCRDR  (allows also access to DEMCR wit
                       h offset)
  594 0000017C         ; R12 ---
  595 0000017C         ;
  596 0000017C         ; Table B1-9 EXC_RETURN definition of exception return b
                       ehavior, with FP extension
  597 0000017C         ; LR           Return to     Return SP   Frame type
  598 0000017C         ; ------------------------------------------------------
                       ---
  599 0000017C         ; 0xFFFFFFE1   Handler mode. MSP         Extended
  600 0000017C         ; 0xFFFFFFE9   Thread mode   MSP         Extended
  601 0000017C         ; 0xFFFFFFED   Thread mode   PSP         Extended
  602 0000017C         ; 0xFFFFFFF1   Handler mode. MSP         Basic
  603 0000017C         ; 0xFFFFFFF9   Thread mode   MSP         Basic
  604 0000017C         ; 0xFFFFFFFD   Thread mode   PSP         Basic
  605 0000017C         ;
  606 0000017C         ; So LR[2] == 1 => Return stack == PSP else MSP
  607 0000017C         ;
  608 0000017C         ;  R0-R3, R12, PC, xPSR can be written via application s
                       tackpointer
  609 0000017C         ;  Other regs can be written directly
  610 0000017C         ;
  611 0000017C         ;
  612 0000017C         ; Read register data from J-Link into R0
  613 0000017C         ;
  614 0000017C 6858            LDR              R0,[R3, #+_SYSTEM_DEMCR_OFF] ; 
                                                            _SYSTEM_DEMCR |= (1
                                                            uL << 19);  => Moni
                                                            tor is ready to rec
                                                            eive register data
  615 0000017E F440 2000       ORR              R0,R0,#0x80000
  616 00000182 6058            STR              R0,[R3, #+_SYSTEM_DEMCR_OFF]
  617 00000184         _HandleWRegWaitUntilDataRecv
  618 00000184 6858            LDR              R0,[R3, #+_SYSTEM_DEMCR_OFF]
  619 00000186 0300            LSLS             R0,R0,#+12
  620 00000188 D4FC            BMI.N            _HandleWRegWaitUntilDataRecv ; 
                                                            DEMCR[19] == 0 => J
                                                            -Link has placed ne
                                                            w data for us
  621 0000018A 6818            LDR              R0,[R3, #+_SYSTEM_DCRDR_OFF] 
                                                            ; Get register data
                                                            
  622 0000018C         ;
  623 0000018C         ; Determine application SP
  624 0000018C         ;
  625 0000018C EA5F 02DE       LSRS             R2,LR,#+3   ; Shift LR[2] into 
                                                            carry => Carry clea
                                                            r means that CPU wa
                                                            s running on MSP
  626 00000190 BF2C            ITE              CS
  627 00000192 F3EF 8209       MRSCS            R2,PSP
  628 00000196 F3EF 8208       MRSCC            R2,MSP
  629 0000019A 2904            CMP              R1,#+4      ; if (RegIndex < 4)
                                                             { (R0-R3)



ARM Macro Assembler    Page 15 


  630 0000019C D202            BCS              _HandleWriteRegR4
  631 0000019E F842 0021       STR              R0,[R2, R1, LSL #+2] ; v = [SP 
                                                            + Rx * 4] (R0-R3)
  632 000001A2 E061            B.N              _HandleWriteRegDone
  633 000001A4         _HandleWriteRegR4
  634 000001A4 2905            CMP              R1,#+5      ; if (RegIndex < 5)
                                                             { (R4)
  635 000001A6 D201            BCS              _HandleWriteRegR5
  636 000001A8 4604            MOV              R4,R0
  637 000001AA E05D            B.N              _HandleWriteRegDone
  638 000001AC         _HandleWriteRegR5
  639 000001AC 2906            CMP              R1,#+6      ; if (RegIndex < 6)
                                                             { (R5)
  640 000001AE D201            BCS              _HandleWriteRegR6
  641 000001B0 4605            MOV              R5,R0
  642 000001B2 E059            B.N              _HandleWriteRegDone
  643 000001B4         _HandleWriteRegR6
  644 000001B4 2907            CMP              R1,#+7      ; if (RegIndex < 7)
                                                             { (R6)
  645 000001B6 D201            BCS              _HandleWriteRegR7
  646 000001B8 4606            MOV              R6,R0
  647 000001BA E055            B.N              _HandleWriteRegDone
  648 000001BC         _HandleWriteRegR7
  649 000001BC 2908            CMP              R1,#+8      ; if (RegIndex < 8)
                                                             { (R7)
  650 000001BE D201            BCS              _HandleWriteRegR8
  651 000001C0 4607            MOV              R7,R0
  652 000001C2 E051            B.N              _HandleWriteRegDone
  653 000001C4         _HandleWriteRegR8
  654 000001C4 2909            CMP              R1,#+9      ; if (RegIndex < 9)
                                                             { (R8)
  655 000001C6 D201            BCS              _HandleWriteRegR9
  656 000001C8 4680            MOV              R8,R0
  657 000001CA E04D            B.N              _HandleWriteRegDone
  658 000001CC         _HandleWriteRegR9
  659 000001CC 290A            CMP              R1,#+10     ; if (RegIndex < 10
                                                            ) { (R9)
  660 000001CE D201            BCS              _HandleWriteRegR10
  661 000001D0 4681            MOV              R9,R0
  662 000001D2 E049            B.N              _HandleWriteRegDone
  663 000001D4         _HandleWriteRegR10
  664 000001D4 290B            CMP              R1,#+11     ; if (RegIndex < 11
                                                            ) { (R10)
  665 000001D6 D201            BCS              _HandleWriteRegR11
  666 000001D8 4682            MOV              R10,R0
  667 000001DA E045            B.N              _HandleWriteRegDone
  668 000001DC         _HandleWriteRegR11
  669 000001DC 290C            CMP              R1,#+12     ; if (RegIndex < 12
                                                            ) { (R11)
  670 000001DE D201            BCS              _HandleWriteRegR12
  671 000001E0 4683            MOV              R11,R0
  672 000001E2 E041            B.N              _HandleWriteRegDone
  673 000001E4         _HandleWriteRegR12
  674 000001E4 290E            CMP              R1,#+14     ; if (RegIndex < 14
                                                            ) { (R12)
  675 000001E6 D201            BCS              _HandleWriteRegR14
  676 000001E8 6110            STR              R0,[R2, #+_APP_SP_OFF_R12]
  677 000001EA E03D            B.N              _HandleWriteRegDone
  678 000001EC         _HandleWriteRegR14



ARM Macro Assembler    Page 16 


  679 000001EC 290F            CMP              R1,#+15     ; if (RegIndex < 15
                                                            ) { (R14 / LR)
  680 000001EE D201            BCS              _HandleWriteRegR15
  681 000001F0 6150            STR              R0,[R2, #+_APP_SP_OFF_R14_LR]
  682 000001F2 E039            B.N              _HandleWriteRegDone
  683 000001F4         _HandleWriteRegR15
  684 000001F4 2910            CMP              R1,#+16     ; if (RegIndex < 16
                                                            ) { (R15 / PC)
  685 000001F6 D201            BCS              _HandleWriteRegXPSR
  686 000001F8 6190            STR              R0,[R2, #+_APP_SP_OFF_PC]
  687 000001FA E035            B.N              _HandleWriteRegDone
  688 000001FC         _HandleWriteRegXPSR
  689 000001FC 2911            CMP              R1,#+17     ; if (RegIndex < 17
                                                            ) { (xPSR)
  690 000001FE D201            BCS              _HandleWriteRegMSP
  691 00000200 61D0            STR              R0,[R2, #+_APP_SP_OFF_XPSR]
  692 00000202 E031            B.N              _HandleWriteRegDone
  693 00000204         _HandleWriteRegMSP
  694 00000204         ;
  695 00000204         ; For now, SP cannot be modified because it is needed to
                        jump back from monitor mode
  696 00000204         ;
  697 00000204 2912            CMP              R1,#+18     ; if (RegIndex < 18
                                                            ) { (MSP)
  698 00000206 D200            BCS              _HandleWriteRegPSP
  699 00000208 E02E            B.N              _HandleWriteRegDone
  700 0000020A         _HandleWriteRegPSP                   ; RegIndex == 18
  701 0000020A 2913            CMP              R1,#+19     ; if (RegIndex < 19
                                                            ) {
  702 0000020C D200            BCS              _HandleWriteRegCFBP
  703 0000020E E02B            B.N              _HandleWriteRegDone
  704 00000210         _HandleWriteRegCFBP
  705 00000210         ;
  706 00000210         ; CFBP is a register that can only be read via debug pro
                       be and is a merger of the following regs:
  707 00000210         ; CONTROL/FAULTMASK/BASEPRI/PRIMASK (packed into 4 bytes
                        of word. CONTROL = CFBP[31:24], FAULTMASK = CFBP[16:23]
                       , BASEPRI = CFBP[15:8], PRIMASK = CFBP[7:0]
  708 00000210         ; To keep J-Link side the same for monitor and halt mode
                       , we also return CFBP in monitor mode
  709 00000210         ;
  710 00000210 2914            CMP              R1,#+20     ; if (RegIndex < 20
                                                            ) { (CFBP)
  711 00000212 D227            BCS              _HandleWriteRegFPU
  712 00000214 0601            LSLS             R1,R0,#+24
  713 00000216 0E09            LSRS             R1,R1,#+24  ; Extract CFBP[7:0]
                                                             => PRIMASK
  714 00000218 F381 8810       MSR              PRIMASK,R1
  715 0000021C 0401            LSLS             R1,R0,#+16
  716 0000021E 0E09            LSRS             R1,R1,#+24  ; Extract CFBP[15:8
                                                            ] => BASEPRI
  717 00000220 F381 8811       MSR              BASEPRI,R1
  718 00000224 0201            LSLS             R1,R0,#+8   ; Extract CFBP[23:1
                                                            6] => FAULTMASK
  719 00000226 0E09            LSRS             R1,R1,#+24
  720 00000228 F381 8813       MSR              FAULTMASK,R1
  721 0000022C 0E01            LSRS             R1,R0,#+24  ; Extract CFBP[31:2
                                                            4] => CONTROL
  722 0000022E 0888            LSRS             R0,R1,#2    ; Current CONTROL[1



ARM Macro Assembler    Page 17 


                                                            ] -> Carry
  723 00000230 BF2C            ITE              CS          ; Update saved CONT
                                                            ROL.SPSEL (CONTROL[
                                                            1]). CONTROL.SPSEL 
                                                            is saved to LR[2] o
                                                            n exception entry =
                                                            > ARM DDI0403D, B1.
                                                            5.6 Exception entry
                                                             behavior
  724 00000232 F04E 0E04       ORRCS            LR,LR,#+4
  725 00000236 F02E 0E04       BICCC            LR,LR,#+4
  726 0000023A F021 0102       BIC              R1,R1,#+2   ; CONTROL.SPSEL (CO
                                                            NTROL[1]) == 0 insi
                                                            de monitor. Otherwi
                                                            se behavior is UNPR
                                                            EDICTABLE
  727 0000023E 08C8            LSRS             R0,R1,#+3   ; New CONTROL.FPCA 
                                                            (CONTROL[2]) -> Car
                                                            ry
  728 00000240 BF2C            ITE              CS          ; CONTROL[2] == FPC
                                                            A => NOT(FPCA) save
                                                            d to LR[4]. LR[4] =
                                                            = 0 => Extended sta
                                                            ck frame, so FPU re
                                                            gs possibly on stac
                                                            k
  729 00000242 F02E 0E10       BICCS            LR,LR,#+0x10 ; Remember: NOT(FP
                                                            CA) is stored to LR
                                                            . == 0 means: Exten
                                                            ded stack frame
  730 00000246 F04E 0E10       ORRCC            LR,LR,#+0x10
  731 0000024A F3EF 8014       MRS              R0,CONTROL
  732 0000024E 08C0            LSRS             R0,R0,#+3   ; CONTROL[2] -> Car
                                                            ry
  733 00000250 BF2C            ITE              CS          ; Preserve original
                                                             value of current C
                                                            ONTROL[2]
  734 00000252 F041 0104       ORRCS            R1,R1,#+0x04
  735 00000256 F021 0104       BICCC            R1,R1,#+0x04
  736 0000025A F381 8814       MSR              CONTROL,R1
  737 0000025E F3BF 8F6F       ISB                          ; Necessary after w
                                                            riting to CONTROL, 
                                                            see ARM DDI0403D, B
                                                            1.4.4 The special-p
                                                            urpose CONTROL regi
                                                            ster
  738 00000262 E001            B.N              _HandleWriteRegDone
  739 00000264         _HandleWriteRegFPU
  740 00000264                 IF               :DEF:__FPU_PRESENT
  861 00000264 E7FF            B                _HandleWriteRegUnknown
  862 00000266                 ENDIF
  863 00000266         _HandleWriteRegUnknown
  864 00000266 E7FF            B.N              _HandleWriteRegDone
  865 00000268         _HandleWriteRegDone
  866 00000268 E6DC            B                _IndicateMonReady ; Indicate th
                                                            at monitor has read
                                                             data, processed co
                                                            mmand and is ready 
                                                            for a new one



ARM Macro Assembler    Page 18 


  867 0000026A 00 00           ALIGN            4
  868 0000026C                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\_build\jlink_monitor_isr_arm.d -o.\_build\jlink_monitor_isr_a
rm.o -I..\..\..\config -I..\..\..\..\..\..\components -I..\..\..\..\..\..\compo
nents\ble\ble_advertising -I..\..\..\..\..\..\components\ble\ble_dtm -I..\..\..
\..\..\..\components\ble\ble_racp -I..\..\..\..\..\..\components\ble\ble_servic
es\ble_ancs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_ans_c -I..\..
\..\..\..\..\components\ble\ble_services\ble_bas -I..\..\..\..\..\..\components
\ble\ble_services\ble_bas_c -I..\..\..\..\..\..\components\ble\ble_services\ble
_cscs -I..\..\..\..\..\..\components\ble\ble_services\ble_cts_c -I..\..\..\..\.
.\..\components\ble\ble_services\ble_dfu -I..\..\..\..\..\..\components\ble\ble
_services\ble_dis -I..\..\..\..\..\..\components\ble\ble_services\ble_gls -I..\
..\..\..\..\..\components\ble\ble_services\ble_hids -I..\..\..\..\..\..\compone
nts\ble\ble_services\ble_hrs -I..\..\..\..\..\..\components\ble\ble_services\bl
e_hrs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_hts -I..\..\..\..\.
.\..\components\ble\ble_services\ble_ias -I..\..\..\..\..\..\components\ble\ble
_services\ble_ias_c -I..\..\..\..\..\..\components\ble\ble_services\ble_lbs -I.
.\..\..\..\..\..\components\ble\ble_services\ble_lbs_c -I..\..\..\..\..\..\comp
onents\ble\ble_services\ble_lls -I..\..\..\..\..\..\components\ble\ble_services
\ble_nus -I..\..\..\..\..\..\components\ble\ble_services\ble_nus_c -I..\..\..\.
.\..\..\components\ble\ble_services\ble_rscs -I..\..\..\..\..\..\components\ble
\ble_services\ble_rscs_c -I..\..\..\..\..\..\components\ble\ble_services\ble_tp
s -I..\..\..\..\..\..\components\ble\common -I..\..\..\..\..\..\components\ble\
nrf_ble_gatt -I..\..\..\..\..\..\components\ble\nrf_ble_qwr -I..\..\..\..\..\..
\components\ble\peer_manager -I..\..\..\..\..\..\components\boards -I..\..\..\.
.\..\..\components\drivers_nrf\clock -I..\..\..\..\..\..\components\drivers_nrf
\common -I..\..\..\..\..\..\components\drivers_nrf\comp -I..\..\..\..\..\..\com
ponents\drivers_nrf\delay -I..\..\..\..\..\..\components\drivers_nrf\gpiote -I.
.\..\..\..\..\..\components\drivers_nrf\hal -I..\..\..\..\..\..\components\driv
ers_nrf\i2s -I..\..\..\..\..\..\components\drivers_nrf\lpcomp -I..\..\..\..\..\
..\components\drivers_nrf\pdm -I..\..\..\..\..\..\components\drivers_nrf\power 
-I..\..\..\..\..\..\components\drivers_nrf\ppi -I..\..\..\..\..\..\components\d
rivers_nrf\pwm -I..\..\..\..\..\..\components\drivers_nrf\qdec -I..\..\..\..\..
\..\components\drivers_nrf\rng -I..\..\..\..\..\..\components\drivers_nrf\rtc -
I..\..\..\..\..\..\components\drivers_nrf\saadc -I..\..\..\..\..\..\components\
drivers_nrf\spi_master -I..\..\..\..\..\..\components\drivers_nrf\spi_slave -I.
.\..\..\..\..\..\components\drivers_nrf\swi -I..\..\..\..\..\..\components\driv
ers_nrf\timer -I..\..\..\..\..\..\components\drivers_nrf\twi_master -I..\..\..\
..\..\..\components\drivers_nrf\twis_slave -I..\..\..\..\..\..\components\drive
rs_nrf\uart -I..\..\..\..\..\..\components\drivers_nrf\usbd -I..\..\..\..\..\..
\components\drivers_nrf\wdt -I..\..\..\..\..\..\components\libraries\atomic -I.
.\..\..\..\..\..\components\libraries\atomic_fifo -I..\..\..\..\..\..\component
s\libraries\balloc -I..\..\..\..\..\..\components\libraries\button -I..\..\..\.
.\..\..\components\libraries\cli -I..\..\..\..\..\..\components\libraries\crc16
 -I..\..\..\..\..\..\components\libraries\crc32 -I..\..\..\..\..\..\components\
libraries\csense -I..\..\..\..\..\..\components\libraries\csense_drv -I..\..\..
\..\..\..\components\libraries\ecc -I..\..\..\..\..\..\components\libraries\exp
erimental_log -I..\..\..\..\..\..\components\libraries\experimental_log\src -I.
.\..\..\..\..\..\components\libraries\experimental_memobj -I..\..\..\..\..\..\c
omponents\libraries\experimental_section_vars -I..\..\..\..\..\..\components\li
braries\fds -I..\..\..\..\..\..\components\libraries\fstorage -I..\..\..\..\..\
..\components\libraries\gpiote -I..\..\..\..\..\..\components\libraries\hardfau
lt -I..\..\..\..\..\..\components\libraries\hci -I..\..\..\..\..\..\components\
libraries\led_softblink -I..\..\..\..\..\..\components\libraries\low_power_pwm 
-I..\..\..\..\..\..\components\libraries\mem_manager -I..\..\..\..\..\..\compon
ents\libraries\mutex -I..\..\..\..\..\..\components\libraries\pwm -I..\..\..\..
\..\..\components\libraries\pwr_mgmt -I..\..\..\..\..\..\components\libraries\q
ueue -I..\..\..\..\..\..\components\libraries\scheduler -I..\..\..\..\..\..\com



ARM Macro Assembler    Page 19 


ponents\libraries\slip -I..\..\..\..\..\..\components\libraries\strerror -I..\.
.\..\..\..\..\components\libraries\timer -I..\..\..\..\..\..\components\librari
es\twi -I..\..\..\..\..\..\components\libraries\twi_mngr -I..\..\..\..\..\..\co
mponents\libraries\uart -I..\..\..\..\..\..\components\libraries\usbd -I..\..\.
.\..\..\..\components\libraries\usbd\class\audio -I..\..\..\..\..\..\components
\libraries\usbd\class\cdc -I..\..\..\..\..\..\components\libraries\usbd\class\c
dc\acm -I..\..\..\..\..\..\components\libraries\usbd\class\hid -I..\..\..\..\..
\..\components\libraries\usbd\class\hid\generic -I..\..\..\..\..\..\components\
libraries\usbd\class\hid\kbd -I..\..\..\..\..\..\components\libraries\usbd\clas
s\hid\mouse -I..\..\..\..\..\..\components\libraries\usbd\class\msc -I..\..\..\
..\..\..\components\libraries\usbd\config -I..\..\..\..\..\..\components\librar
ies\util -I..\..\..\..\..\..\components\softdevice\common -I..\..\..\..\..\..\c
omponents\softdevice\s132\headers -I..\..\..\..\..\..\components\softdevice\s13
2\headers\nrf52 -I..\..\..\..\..\..\components\toolchain -I..\..\..\..\..\..\ex
ternal\fprintf -I..\..\..\..\..\..\external\segger_rtt -I..\config -IC:\Users\h
aho\Documents\nRF_SDK\nRF5_SDK_14.2\examples\ble_peripheral\MMD\pca10040\s132\a
rm5_no_packs\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -IC:\Keil_
v5\ARM\PACK\NordicSemiconductor\nRF_DeviceFamilyPack\8.15.0\Device\Include -IC:
\Keil_v5\ARM\CMSIS\Include --predefine="__MICROLIB SETA 1" --predefine="__UVISI
ON_VERSION SETA 521" --predefine="_RTE_ SETA 1" --predefine="NRF52 SETA 1" --pr
edefine="BOARD_PCA10040 SETA 1" --predefine="CONFIG_GPIO_AS_PINRESET SETA 1" --
predefine="FLOAT_ABI_HARD SETA 1" --predefine="NRF52 SETA 1" --predefine="NRF52
832_XXAA SETA 1" --predefine="NRF52_PAN_74 SETA 1" --predefine="NRF_SD_BLE_API_
VERSION SETA 5" --predefine="S132 SETA 1" --predefine="SOFTDEVICE_PRESENT SETA 
1" --predefine="SWI_DISABLE0 SETA 1" --cpreproc_opts=-DBOARD_PCA10040,-DCONFIG_
GPIO_AS_PINRESET,-DFLOAT_ABI_HARD,-DNRF52,-DNRF52832_XXAA,-DNRF52_PAN_74,-DNRF_
SD_BLE_API_VERSION=5,-DS132,-DSOFTDEVICE_PRESENT,-DSWI_DISABLE0 --list=.\_build
\jlink_monitor_isr_arm.lst ..\..\..\JLINK_MONITOR_ISR_ARM.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 90 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: .text unused
DebugMon_Handler 00000010

Symbol: DebugMon_Handler
   Definitions
      At line 124 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 22 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: DebugMon_Handler used once
_AddrCPACR 0000006C

Symbol: _AddrCPACR
   Definitions
      At line 217 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _AddrCPACR unused
_AddrDCRDR 00000068

Symbol: _AddrDCRDR
   Definitions
      At line 215 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 142 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 166 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_HandleGetMonVersion 00000070

Symbol: _HandleGetMonVersion
   Definitions
      At line 228 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 192 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleGetMonVersion used once
_HandleReadReg 00000080

Symbol: _HandleReadReg
   Definitions
      At line 249 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 194 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadReg used once
_HandleReadRegCFBP 0000012A

Symbol: _HandleReadRegCFBP
   Definitions
      At line 404 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 399 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegCFBP used once
_HandleReadRegDone 00000170




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: _HandleReadRegDone
   Definitions
      At line 560 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 296 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 301 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 306 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 311 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 316 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 321 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 326 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 331 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 336 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 341 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 346 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 351 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 356 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 396 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 431 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 555 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 559 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_HandleReadRegDone_Veneer 0000016A

Symbol: _HandleReadRegDone_Veneer
   Definitions
      At line 554 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 386 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 402 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_HandleReadRegFPU 00000168

Symbol: _HandleReadRegFPU
   Definitions
      At line 432 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 411 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegFPU used once
_HandleReadRegMSP 000000F8

Symbol: _HandleReadRegMSP
   Definitions
      At line 357 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 354 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegMSP used once
_HandleReadRegPSP 0000011A

Symbol: _HandleReadRegPSP
   Definitions
      At line 397 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 383 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegPSP used once
_HandleReadRegR10 000000C8

Symbol: _HandleReadRegR10
   Definitions



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 327 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 324 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegR10 used once
_HandleReadRegR11 000000D0

Symbol: _HandleReadRegR11
   Definitions
      At line 332 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 329 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegR11 used once
_HandleReadRegR12 000000D8

Symbol: _HandleReadRegR12
   Definitions
      At line 337 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 334 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegR12 used once
_HandleReadRegR14 000000E0

Symbol: _HandleReadRegR14
   Definitions
      At line 342 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 339 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegR14 used once
_HandleReadRegR15 000000E8

Symbol: _HandleReadRegR15
   Definitions
      At line 347 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 344 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegR15 used once
_HandleReadRegR4 00000098

Symbol: _HandleReadRegR4
   Definitions
      At line 297 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 294 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegR4 used once
_HandleReadRegR5 000000A0

Symbol: _HandleReadRegR5
   Definitions
      At line 302 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 299 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegR5 used once
_HandleReadRegR6 000000A8

Symbol: _HandleReadRegR6
   Definitions
      At line 307 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 304 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

Comment: _HandleReadRegR6 used once
_HandleReadRegR7 000000B0

Symbol: _HandleReadRegR7
   Definitions
      At line 312 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 309 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegR7 used once
_HandleReadRegR8 000000B8

Symbol: _HandleReadRegR8
   Definitions
      At line 317 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 314 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegR8 used once
_HandleReadRegR9 000000C0

Symbol: _HandleReadRegR9
   Definitions
      At line 322 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 319 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegR9 used once
_HandleReadRegUnknown 0000016C

Symbol: _HandleReadRegUnknown
   Definitions
      At line 557 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 553 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegUnknown used once
_HandleReadRegXPSR 000000F0

Symbol: _HandleReadRegXPSR
   Definitions
      At line 352 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 349 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleReadRegXPSR used once
_HandleRestartCPU 00000056

Symbol: _HandleRestartCPU
   Definitions
      At line 204 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 195 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleRestartCPU used once
_HandleSPCorrection 00000106

Symbol: _HandleSPCorrection
   Definitions
      At line 387 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 403 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleSPCorrection used once
_HandleWRegWaitUntilDataRecv 00000184




ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Relocatable symbols

Symbol: _HandleWRegWaitUntilDataRecv
   Definitions
      At line 617 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 620 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWRegWaitUntilDataRecv used once
_HandleWriteReg 0000017C

Symbol: _HandleWriteReg
   Definitions
      At line 572 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 248 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteReg used once
_HandleWriteRegCFBP 00000210

Symbol: _HandleWriteRegCFBP
   Definitions
      At line 704 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 702 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegCFBP used once
_HandleWriteRegDone 00000268

Symbol: _HandleWriteRegDone
   Definitions
      At line 865 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 632 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 637 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 642 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 647 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 652 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 657 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 662 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 667 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 672 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 677 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 682 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 687 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 692 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 699 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 703 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 738 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 864 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_HandleWriteRegFPU 00000264

Symbol: _HandleWriteRegFPU
   Definitions
      At line 739 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 711 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegFPU used once
_HandleWriteRegMSP 00000204

Symbol: _HandleWriteRegMSP
   Definitions
      At line 693 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Relocatable symbols

   Uses
      At line 690 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegMSP used once
_HandleWriteRegPSP 0000020A

Symbol: _HandleWriteRegPSP
   Definitions
      At line 700 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 698 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegPSP used once
_HandleWriteRegR10 000001D4

Symbol: _HandleWriteRegR10
   Definitions
      At line 663 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 660 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR10 used once
_HandleWriteRegR11 000001DC

Symbol: _HandleWriteRegR11
   Definitions
      At line 668 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 665 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR11 used once
_HandleWriteRegR12 000001E4

Symbol: _HandleWriteRegR12
   Definitions
      At line 673 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 670 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR12 used once
_HandleWriteRegR14 000001EC

Symbol: _HandleWriteRegR14
   Definitions
      At line 678 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 675 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR14 used once
_HandleWriteRegR15 000001F4

Symbol: _HandleWriteRegR15
   Definitions
      At line 683 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 680 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR15 used once
_HandleWriteRegR4 000001A4

Symbol: _HandleWriteRegR4
   Definitions
      At line 633 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 630 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR4 used once



ARM Macro Assembler    Page 7 Alphabetic symbol ordering
Relocatable symbols

_HandleWriteRegR5 000001AC

Symbol: _HandleWriteRegR5
   Definitions
      At line 638 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 635 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR5 used once
_HandleWriteRegR6 000001B4

Symbol: _HandleWriteRegR6
   Definitions
      At line 643 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 640 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR6 used once
_HandleWriteRegR7 000001BC

Symbol: _HandleWriteRegR7
   Definitions
      At line 648 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 645 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR7 used once
_HandleWriteRegR8 000001C4

Symbol: _HandleWriteRegR8
   Definitions
      At line 653 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 650 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR8 used once
_HandleWriteRegR9 000001CC

Symbol: _HandleWriteRegR9
   Definitions
      At line 658 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 655 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegR9 used once
_HandleWriteRegUnknown 00000266

Symbol: _HandleWriteRegUnknown
   Definitions
      At line 863 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 861 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegUnknown used once
_HandleWriteRegXPSR 000001FC

Symbol: _HandleWriteRegXPSR
   Definitions
      At line 688 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 685 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteRegXPSR used once
_HandleWriteReg_Veneer 0000007E

Symbol: _HandleWriteReg_Veneer



ARM Macro Assembler    Page 8 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 247 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 197 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _HandleWriteReg_Veneer used once
_IndicateMonReady 00000024

Symbol: _IndicateMonReady
   Definitions
      At line 148 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 143 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 198 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 866 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_WaitForJLinkCmd 0000002C

Symbol: _WaitForJLinkCmd
   Definitions
      At line 162 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 169 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _WaitForJLinkCmd used once
_WaitProbeReadIndicateMonRdy 0000001E

Symbol: _WaitProbeReadIndicateMonRdy
   Definitions
      At line 144 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 147 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 240 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 568 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

51 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

_APP_SP_OFF_FPSCR 00000060

Symbol: _APP_SP_OFF_FPSCR
   Definitions
      At line 64 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_FPSCR unused
_APP_SP_OFF_PC 00000018

Symbol: _APP_SP_OFF_PC
   Definitions
      At line 46 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 350 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 686 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_APP_SP_OFF_R0 00000000

Symbol: _APP_SP_OFF_R0
   Definitions
      At line 40 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_R0 unused
_APP_SP_OFF_R1 00000004

Symbol: _APP_SP_OFF_R1
   Definitions
      At line 41 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_R1 unused
_APP_SP_OFF_R12 00000010

Symbol: _APP_SP_OFF_R12
   Definitions
      At line 44 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 340 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 676 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_APP_SP_OFF_R14_LR 00000014

Symbol: _APP_SP_OFF_R14_LR
   Definitions
      At line 45 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 345 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 681 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_APP_SP_OFF_R2 00000008

Symbol: _APP_SP_OFF_R2
   Definitions
      At line 42 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_R2 unused



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

_APP_SP_OFF_R3 0000000C

Symbol: _APP_SP_OFF_R3
   Definitions
      At line 43 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_R3 unused
_APP_SP_OFF_S0 00000020

Symbol: _APP_SP_OFF_S0
   Definitions
      At line 48 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S0 unused
_APP_SP_OFF_S1 00000024

Symbol: _APP_SP_OFF_S1
   Definitions
      At line 49 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S1 unused
_APP_SP_OFF_S10 00000048

Symbol: _APP_SP_OFF_S10
   Definitions
      At line 58 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S10 unused
_APP_SP_OFF_S11 0000004C

Symbol: _APP_SP_OFF_S11
   Definitions
      At line 59 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S11 unused
_APP_SP_OFF_S12 00000050

Symbol: _APP_SP_OFF_S12
   Definitions
      At line 60 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S12 unused
_APP_SP_OFF_S13 00000054

Symbol: _APP_SP_OFF_S13
   Definitions
      At line 61 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S13 unused
_APP_SP_OFF_S14 00000058

Symbol: _APP_SP_OFF_S14



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 62 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S14 unused
_APP_SP_OFF_S15 0000005C

Symbol: _APP_SP_OFF_S15
   Definitions
      At line 63 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S15 unused
_APP_SP_OFF_S2 00000028

Symbol: _APP_SP_OFF_S2
   Definitions
      At line 50 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S2 unused
_APP_SP_OFF_S3 0000002C

Symbol: _APP_SP_OFF_S3
   Definitions
      At line 51 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S3 unused
_APP_SP_OFF_S4 00000030

Symbol: _APP_SP_OFF_S4
   Definitions
      At line 52 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S4 unused
_APP_SP_OFF_S5 00000034

Symbol: _APP_SP_OFF_S5
   Definitions
      At line 53 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S5 unused
_APP_SP_OFF_S6 00000038

Symbol: _APP_SP_OFF_S6
   Definitions
      At line 54 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S6 unused
_APP_SP_OFF_S7 0000003C

Symbol: _APP_SP_OFF_S7
   Definitions
      At line 55 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Absolute symbols

      None
Comment: _APP_SP_OFF_S7 unused
_APP_SP_OFF_S8 00000040

Symbol: _APP_SP_OFF_S8
   Definitions
      At line 56 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S8 unused
_APP_SP_OFF_S9 00000044

Symbol: _APP_SP_OFF_S9
   Definitions
      At line 57 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _APP_SP_OFF_S9 unused
_APP_SP_OFF_XPSR 0000001C

Symbol: _APP_SP_OFF_XPSR
   Definitions
      At line 47 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 355 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 392 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 691 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_MON_VERSION 00000064

Symbol: _MON_VERSION
   Definitions
      At line 31 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 235 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _MON_VERSION used once
_NUM_BYTES_BASIC_STACKFRAME 00000020

Symbol: _NUM_BYTES_BASIC_STACKFRAME
   Definitions
      At line 66 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 390 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _NUM_BYTES_BASIC_STACKFRAME used once
_NUM_BYTES_EXTENDED_STACKFRAME 00000048

Symbol: _NUM_BYTES_EXTENDED_STACKFRAME
   Definitions
      At line 67 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 391 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: _NUM_BYTES_EXTENDED_STACKFRAME used once
_SYSTEM_DCRDR E000EDF8

Symbol: _SYSTEM_DCRDR
   Definitions
      At line 74 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None



ARM Macro Assembler    Page 5 Alphabetic symbol ordering
Absolute symbols

Comment: _SYSTEM_DCRDR unused
_SYSTEM_DCRDR_OFF 00000000

Symbol: _SYSTEM_DCRDR_OFF
   Definitions
      At line 69 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 184 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 236 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 564 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 621 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_SYSTEM_DCRSR E000EDF4

Symbol: _SYSTEM_DCRSR
   Definitions
      At line 73 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _SYSTEM_DCRSR unused
_SYSTEM_DEMCR E000EDFC

Symbol: _SYSTEM_DEMCR
   Definitions
      At line 75 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _SYSTEM_DEMCR unused
_SYSTEM_DEMCR_OFF 00000004

Symbol: _SYSTEM_DEMCR_OFF
   Definitions
      At line 70 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 145 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 149 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 151 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 167 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 205 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 207 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 237 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 239 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 565 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 567 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 614 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 616 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
      At line 618 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s

_SYSTEM_DHCSR E000EDF0

Symbol: _SYSTEM_DHCSR
   Definitions
      At line 72 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _SYSTEM_DHCSR unused
_SYSTEM_FPCAR E000EF38

Symbol: _SYSTEM_FPCAR



ARM Macro Assembler    Page 6 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 78 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _SYSTEM_FPCAR unused
_SYSTEM_FPCCR E000EF34

Symbol: _SYSTEM_FPCCR
   Definitions
      At line 77 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _SYSTEM_FPCCR unused
_SYSTEM_FPDSCR E000EF3C

Symbol: _SYSTEM_FPDSCR
   Definitions
      At line 79 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _SYSTEM_FPDSCR unused
_SYSTEM_MVFR0 E000EF40

Symbol: _SYSTEM_MVFR0
   Definitions
      At line 80 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _SYSTEM_MVFR0 unused
_SYSTEM_MVFR1 E000EF44

Symbol: _SYSTEM_MVFR1
   Definitions
      At line 81 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      None
Comment: _SYSTEM_MVFR1 unused
39 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

JLINK_MONITOR_OnEnter 00000000

Symbol: JLINK_MONITOR_OnEnter
   Definitions
      At line 18 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 140 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: JLINK_MONITOR_OnEnter used once
JLINK_MONITOR_OnExit 00000000

Symbol: JLINK_MONITOR_OnExit
   Definitions
      At line 19 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 209 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: JLINK_MONITOR_OnExit used once
JLINK_MONITOR_OnPoll 00000000

Symbol: JLINK_MONITOR_OnPoll
   Definitions
      At line 20 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
   Uses
      At line 164 in file ..\..\..\JLINK_MONITOR_ISR_ARM.s
Comment: JLINK_MONITOR_OnPoll used once
3 symbols
441 symbols in table
